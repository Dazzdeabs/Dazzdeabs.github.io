{"ast":null,"code":"import _classCallCheck from \"/Users/darrendeabreu/Desktop/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/darrendeabreu/Desktop/my-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/darrendeabreu/Desktop/my-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/darrendeabreu/Desktop/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/darrendeabreu/Desktop/my-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/darrendeabreu/Desktop/my-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/darrendeabreu/Desktop/my-app/src/components/accInfo.js\";\nimport React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom';\n\nvar AccInfo =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AccInfo, _Component);\n\n  // {/* The constructor for a React Component is called before it is mounted. */}\n  function AccInfo(props) {\n    var _this;\n\n    _classCallCheck(this, AccInfo);\n\n    {\n      /* Pass props to the constructor by super. */\n    }\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AccInfo).call(this, props));\n    {\n      /**\n       * Initalise the local state by assigning objects to this.state.\n      */\n    }\n    _this.state = {\n      // {/* Passing an empty string as a value for cheque, savings, credit and inv. */\n      cheque: '',\n      savings: '',\n      credit: '',\n      inv: ''\n    };\n    {\n      /**\n      * Bind the value of the control to the currrent value of the state.\n      * There must be a bound so that if there is a value and something that causes the control to re-render,\n      it gets the correct value out of the state.\n      */\n    }\n    _this.handleCheque = _this.handleCheque.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSave = _this.handleSave.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleCredit = _this.handleCredit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSpec = _this.handleSpec.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } // {/* A function to update the cheque state. */}\n\n\n  _createClass(AccInfo, [{\n    key: \"handleCheque\",\n    value: function handleCheque() {\n      this.setState(function (state) {\n        return {\n          // {/* Popup message provides user with information about the cheque account. */}\n          cheque: alert('This is all the information on the cheque account. ')\n        };\n      });\n    } // {/* A function to update the savings state. */}\n\n  }, {\n    key: \"handleSave\",\n    value: function handleSave() {\n      this.setState(function (state) {\n        return {\n          // {/* Popup message provides user with information about the savings account. */}\n          savings: alert('This is all the information on the savings account. ')\n        };\n      });\n    } // {/* A function to update the credit state. */}\n\n  }, {\n    key: \"handleCredit\",\n    value: function handleCredit() {\n      this.setState(function (state) {\n        return {\n          // {/* Popup message provides user with information about the credit account. */}\n          credit: alert('This is all the information on the credit account. ')\n        };\n      });\n    } // {/* A function to update the investment state. */}\n\n  }, {\n    key: \"handleSpec\",\n    value: function handleSpec() {\n      this.setState(function (state) {\n        return {\n          // {/* Popup message provides user with information about the investment account. */}\n          inv: alert('This is all the information on the special investment account. ')\n        };\n      });\n    } // {/* Render method returns a second navbar and buttons for information on different accounts. */}\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navbar2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(NavLink, {\n        to: \"/MyAccounts\",\n        className: \"navButton\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \" My Accounts \"), React.createElement(NavLink, {\n        to: \"/newAcc\",\n        className: \"navButton\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \" New Account \"), React.createElement(NavLink, {\n        to: \"/accInfo\",\n        className: \"navButton\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \" Account Information \")), React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"Account Information\"), React.createElement(\"div\", {\n        className: \"btns\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        id: \"typebtn\",\n        className: \"button\",\n        type: \"button\",\n        onClick: this.handleCheque,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"Cheque\"), React.createElement(\"button\", {\n        id: \"typebtn\",\n        className: \"button\",\n        type: \"button\",\n        onClick: this.handleSave,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"Savings\"), React.createElement(\"button\", {\n        id: \"typebtn\",\n        className: \"button\",\n        type: \"button\",\n        onClick: this.handleCredit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Credit\"), React.createElement(\"button\", {\n        id: \"typebtn\",\n        className: \"button\",\n        type: \"button\",\n        onClick: this.handleSpec,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"Special Investment\"))));\n    }\n  }]);\n\n  return AccInfo;\n}(Component);\n\nexport default AccInfo;","map":{"version":3,"sources":["/Users/darrendeabreu/Desktop/my-app/src/components/accInfo.js"],"names":["React","Component","NavLink","AccInfo","props","state","cheque","savings","credit","inv","handleCheque","bind","handleSave","handleCredit","handleSpec","setState","alert"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom';\n\nclass AccInfo extends Component {\n  // {/* The constructor for a React Component is called before it is mounted. */}\n  constructor(props) {\n    {/* Pass props to the constructor by super. */}\n    super(props);\n    {/**\n      * Initalise the local state by assigning objects to this.state.\n    */}\n    this.state={\n       // {/* Passing an empty string as a value for cheque, savings, credit and inv. */\n      cheque: '',\n      savings: '',\n      credit: '',\n      inv: '',\n\n    }\n\n    {/**\n    * Bind the value of the control to the currrent value of the state.\n    * There must be a bound so that if there is a value and something that causes the control to re-render,\n    it gets the correct value out of the state.\n    */}\n    this.handleCheque = this.handleCheque.bind(this);\n    this.handleSave = this.handleSave.bind(this);\n    this.handleCredit = this.handleCredit.bind(this);\n    this.handleSpec = this.handleSpec.bind(this);\n  }\n\n  // {/* A function to update the cheque state. */}\n  handleCheque () {\n   this.setState(state => ({\n          // {/* Popup message provides user with information about the cheque account. */}\n          cheque: alert('This is all the information on the cheque account. '),\n      }))\n  }\n\n  // {/* A function to update the savings state. */}\n  handleSave () {\n   this.setState(state => ({\n          // {/* Popup message provides user with information about the savings account. */}\n          savings: alert('This is all the information on the savings account. '),\n      }))\n  }\n\n  // {/* A function to update the credit state. */}\n  handleCredit () {\n   this.setState(state => ({\n          // {/* Popup message provides user with information about the credit account. */}\n          credit: alert('This is all the information on the credit account. '),\n      }))\n  }\n\n  // {/* A function to update the investment state. */}\n  handleSpec () {\n   this.setState(state => ({\n          // {/* Popup message provides user with information about the investment account. */}\n          inv: alert('This is all the information on the special investment account. '),\n      }))\n  }\n\n  // {/* Render method returns a second navbar and buttons for information on different accounts. */}\n  render () {\n    return (\n      <div>\n      <div className='navbar2'>\n      <NavLink to=\"/MyAccounts\" className = \"navButton\"> My Accounts </NavLink>\n      <NavLink to=\"/newAcc\" className = \"navButton\"> New Account </NavLink>\n      <NavLink to=\"/accInfo\" className = \"navButton\"> Account Information </NavLink>\n      </div>\n        <center>\n          <h1>Account Information</h1>\n          <div className=\"btns\">\n            {/* Calls the handleChange function with the onChange event. */}\n            <button id=\"typebtn\" className =\"button\"type=\"button\" onClick={this.handleCheque}>Cheque</button>\n            <button id=\"typebtn\" className =\"button\"type=\"button\" onClick={this.handleSave}>Savings</button>\n            <button id=\"typebtn\" className =\"button\"type=\"button\" onClick={this.handleCredit}>Credit</button>\n            <button id=\"typebtn\" className =\"button\"type=\"button\" onClick={this.handleSpec}>Special Investment</button>\n          </div>\n        </center>\n      </div>\n    )\n  }\n}\n\nexport default AccInfo\n"]},"metadata":{},"sourceType":"module"}