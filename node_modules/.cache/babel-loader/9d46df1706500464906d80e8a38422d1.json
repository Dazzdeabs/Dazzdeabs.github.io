{"ast":null,"code":"import _regeneratorRuntime from \"/Users/darrendeabreu/Desktop/uni-shit/ISM-354/Reactjs/my-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/darrendeabreu/Desktop/uni-shit/ISM-354/Reactjs/my-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/darrendeabreu/Desktop/uni-shit/ISM-354/Reactjs/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/darrendeabreu/Desktop/uni-shit/ISM-354/Reactjs/my-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/darrendeabreu/Desktop/uni-shit/ISM-354/Reactjs/my-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/darrendeabreu/Desktop/uni-shit/ISM-354/Reactjs/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/darrendeabreu/Desktop/uni-shit/ISM-354/Reactjs/my-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/darrendeabreu/Desktop/uni-shit/ISM-354/Reactjs/my-app/src/components/history.js\";\nimport React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport axios from 'axios';\nimport jsSHA from 'jssha';\n\nvar History =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(History, _Component);\n\n  // {/* The constructor for a React Component is called before it is mounted. */}\n  function History() {\n    var _this;\n\n    _classCallCheck(this, History);\n\n    // {/* Pass props to the constructor by super. */}\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(History).call(this)); // {/* Initalise the local state by assigning objects to this.state. */}\n\n    _this.state = {\n      account: {},\n      // {/* Passing an array as a value for transactions. */}\n      transactions: []\n    };\n    return _this;\n  } // {/* Invoked immediately after a component is mounted. */}\n\n\n  _createClass(History, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      {\n        /* Global username and password fetches the payment history only if the user has 1 account, otherwise the table is empty because of an issue with the accounts unique id. */\n      }\n      {\n        /*If the user has more than 1 account, the table is empty but the payment history is rendered in the console*/\n      }\n      var user = this.props.username; //'blackfish787';\n\n      var password = this.props.password; //'lestat';\n\n      var hmac = new jsSHA('SHA-256', 'TEXT');\n      hmac.setHMACKey(password, 'TEXT');\n      hmac.update(user);\n      hmac.update(Date.now().toString(36).substring(0, 4));\n      var token = \"\".concat(hmac.getHMAC('HEX'), \"%\").concat(user);\n      var api = axios.create({\n        // {/** Instantiate the network request. */}\n        baseURL: 'http://45.77.58.134:8080',\n        headers: {\n          'Authorization': 'Bearer ' + token\n        }\n      });\n\n      _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var res, accounts, transactions, payments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return api.get('/clients');\n\n              case 2:\n                res = _context.sent;\n                _context.next = 5;\n                return api.get(\"/accounts/\".concat(res.data[0]._id));\n\n              case 5:\n                accounts = _context.sent;\n                _context.next = 8;\n                return api.get(\"/transactions/\".concat(accounts.data[0]._id, \"/.*\"));\n\n              case 8:\n                transactions = _context.sent;\n                // {/*  Declare a payements array. */}\n                payments = [];\n                _context.next = 12;\n                return transactions.data.map(function (x) {\n                  // {/*  If the transaction type is a payment, populate the payements array with it. */}\n                  if (x.type === 'payment') {\n                    payments.push(x);\n                  }\n                });\n\n              case 12:\n                _this2.setState({\n                  account: accounts.data[0],\n                  transactions: payments\n                });\n\n                console.log(transactions);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }))();\n    }\n  }, {\n    key: \"render\",\n    // {/* Render method returns a second navbar and user's payment history on the screen. */}\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navbar2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(NavLink, {\n        to: \"/payments\",\n        className: \"navButton\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \" Once-off Payments \"), React.createElement(NavLink, {\n        to: \"/scheduled\",\n        className: \"navButton\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \" Scheduled Payments \"), React.createElement(\"div\", {\n        className: \"dropdown\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"dropbtn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \" Pay Beneficiary \", React.createElement(\"i\", {\n        className: \"fa fa-caret-down\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"dropdown-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(NavLink, {\n        to: \"/beneficiary\",\n        className: \"navButton\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \" Add New Beneficiary \"), React.createElement(NavLink, {\n        to: \"/existing\",\n        className: \"navButton\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \" Existing Beneficiaries \"))), React.createElement(NavLink, {\n        to: \"/history\",\n        className: \"navButton\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \" Payment History \")), React.createElement(\"div\", {\n        id: \"Payment History\",\n        className: \"w3-container city\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"Payment History\"), React.createElement(\"table\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Date\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \"Time\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"Type\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"Amount\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"Ref\")), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, this.state.transactions.map(function (x) {\n        return (// {/* Sets the key. */}\n          React.createElement(\"tr\", {\n            key: x._id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 93\n            },\n            __self: this\n          }, React.createElement(\"td\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 95\n            },\n            __self: this\n          }, Intl.DateTimeFormat('en-GB', {\n            year: 'numeric',\n            month: 'long',\n            day: '2-digit'\n          }).format(x.time)), React.createElement(\"td\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 101\n            },\n            __self: this\n          }, Intl.DateTimeFormat('en-GB', {\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit'\n          }).format(x.time)), React.createElement(\"td\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 106\n            },\n            __self: this\n          }, x.type), React.createElement(\"td\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 108\n            },\n            __self: this\n          }, Intl.NumberFormat('en-GB', {\n            style: 'currency',\n            currency: 'ZAR'\n          }).format(x.amount)), React.createElement(\"td\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 112\n            },\n            __self: this\n          }, x.ref))\n        );\n      })))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return History;\n}(Component);\n\nexport default History;","map":{"version":3,"sources":["/Users/darrendeabreu/Desktop/uni-shit/ISM-354/Reactjs/my-app/src/components/history.js"],"names":["React","Component","NavLink","axios","jsSHA","History","state","account","transactions","user","props","username","password","hmac","setHMACKey","update","Date","now","toString","substring","token","getHMAC","api","create","baseURL","headers","get","res","data","_id","accounts","payments","map","x","type","push","setState","console","log","Intl","DateTimeFormat","year","month","day","format","time","hour","minute","second","NumberFormat","style","currency","amount","ref"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport axios from 'axios';\nimport jsSHA from 'jssha';\n\nclass History extends Component {\n  // {/* The constructor for a React Component is called before it is mounted. */}\n  constructor() {\n  // {/* Pass props to the constructor by super. */}\n  super()\n  // {/* Initalise the local state by assigning objects to this.state. */}\n  this.state = {\n  account: {},\n  // {/* Passing an array as a value for transactions. */}\n  transactions: [] };\n}\n\n  // {/* Invoked immediately after a component is mounted. */}\n  componentDidMount() {\n    {/* Global username and password fetches the payment history only if the user has 1 account, otherwise the table is empty because of an issue with the accounts unique id. */}\n    {/*If the user has more than 1 account, the table is empty but the payment history is rendered in the console*/}\n    const user = this.props.username; //'blackfish787';\n    const password = this.props.password; //'lestat';\n    const hmac = new jsSHA('SHA-256', 'TEXT');\n    hmac.setHMACKey(password, 'TEXT');\n    hmac.update(user);\n    hmac.update(Date.now().toString(36).substring(0, 4));\n    const token = `${hmac.getHMAC('HEX')}%${user}`;\n    const api = axios.create({\n    // {/** Instantiate the network request. */}\n    baseURL: 'http://45.77.58.134:8080',\n    headers: { 'Authorization': 'Bearer ' + token }\n     });\n\n    (async () => {\n      // {/* Retrieve clients for authenticated user. */}}\n      const res = await api.get('/clients');\n      // {/*  Retrieve accounts for specified client UUID. */}\n      const accounts = await api.get(`/accounts/${res.data[0]._id}`)\n      // {/*  Retrieves all( .*) transactions for given accounts based on the clients ID. */}\n      const transactions = await api.get(`/transactions/${accounts.data[0]._id}/.*`)\n      // {/*  Declare a payements array. */}\n      const payments = [];\n      await transactions.data.map(x => {\n      // {/*  If the transaction type is a payment, populate the payements array with it. */}\n      if (x.type === 'payment') {\n         payments.push(x);\n      }\n      });\n\n      {/* Calls setState() immediately in componentDidMount().\n      * setSate() updates the account state with account data.\n      * setSate() updates the transactions state with payments data.\n      * Passing account and transactions objects to setState().\n      */}\n      this.setState({\n        account: accounts.data[0],\n        transactions: payments});\n        console.log(transactions);\n        })();\n        };\n\n      // {/* Render method returns a second navbar and user's payment history on the screen. */}\n      render () {\n       return (\n         <div>\n           <div className=\"navbar2\">\n               <NavLink to=\"/payments\" className=\"navButton\"> Once-off Payments </NavLink>\n               <NavLink to=\"/scheduled\" className=\"navButton\"> Scheduled Payments </NavLink>\n             <div className = \"dropdown\">\n              <button className = \"dropbtn\"> Pay Beneficiary <i className = \"fa fa-caret-down\"></i></button>\n             <div className = \"dropdown-content\">\n               <NavLink to=\"/beneficiary\" className=\"navButton\"> Add New Beneficiary </NavLink>\n               <NavLink to=\"/existing\" className=\"navButton\"> Existing Beneficiaries </NavLink>\n           </div>\n           </div>\n             <NavLink to=\"/history\" className=\"navButton\"> Payment History </NavLink>\n           </div>\n           <div id=\"Payment History\" className=\"w3-container city\">\n            <h1>Payment History</h1>\n              <table>\n                <thead>\n                  <th>Date</th>\n                 <th>Time</th>\n                 <th>Type</th>\n                 <th>Amount</th>\n                 <th>Ref</th>\n               </thead>\n              <tbody>\n                {/* Maps the transactions time, type, amount and reference into a table. */}\n                {this.state.transactions.map(x =>\n                  // {/* Sets the key. */}\n                  <tr key = {x._id}>\n                    {/*Formats the date from seconds into 'YYYY/MM/D'. */}\n                    <td>{Intl.DateTimeFormat('en-GB', {\n                      year: 'numeric',\n                      month: 'long',\n                      day: '2-digit',\n                      }).format(x.time)}</td>\n                    {/*Formats the date from seconds into 'YYYY/MM/D'. */}\n                    <td>{Intl.DateTimeFormat('en-GB', {\n                      hour: '2-digit',\n                      minute: '2-digit',\n                      second: '2-digit'\n                      }).format(x.time)}</td>\n                  <td>{x.type}</td>\n                  {/* Converts the cents to rands. */}\n                  <td>{Intl.NumberFormat('en-GB', {\n                      style: 'currency',\n                      currency: 'ZAR'\n                      }).format(x.amount)}</td>\n                <td>{x.ref}</td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div><br/>\n      </div>\n    )\n  }\n}\n\nexport default History\n"]},"metadata":{},"sourceType":"module"}