{"ast":null,"code":"import _regeneratorRuntime from \"/Users/darrendeabreu/Desktop/repo/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/darrendeabreu/Desktop/repo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/darrendeabreu/Desktop/repo/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/darrendeabreu/Desktop/repo/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/darrendeabreu/Desktop/repo/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/darrendeabreu/Desktop/repo/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/darrendeabreu/Desktop/repo/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/darrendeabreu/Desktop/repo/src/components/Statements.js\";\nimport React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport axios from 'axios';\nimport jsSHA from 'jssha';\n\nvar Statements =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Statements, _Component);\n\n  // {/* The constructor for a React Component is called before it is mounted. */}\n  function Statements() {\n    var _this;\n\n    _classCallCheck(this, Statements);\n\n    {\n      /* Pass props to the constructor by super. */\n    }\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Statements).call(this));\n    {\n      /* Initalise the local state by assigning objects to this.state. */\n    }\n    _this.state = {\n      account: {},\n      transactions: []\n    };\n    return _this;\n  } // {/* Invoked immediately after a component is mounted. */}\n\n\n  _createClass(Statements, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      {\n        /* username and password had to be hard coded in order to view the statements of the individual accounts, if user had 1< accounts an empty table was rendered */\n      }\n      var user = 'blacktiger144';\n      var password = '191919';\n      var hmac = new jsSHA('SHA-256', 'TEXT');\n      hmac.setHMACKey(password, 'TEXT');\n      hmac.update(user);\n      hmac.update(Date.now().toString(36).substring(0, 4));\n      var token = \"\".concat(hmac.getHMAC('HEX'), \"%\").concat(user);\n      var api = axios.create({\n        // {/** Instantiate the network request. */}\n        baseURL: 'http://45.77.58.134:8080',\n        headers: {\n          'Authorization': 'Bearer ' + token\n        }\n      });\n\n      _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var id, res, accounts, transactions, x;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                id = _this2.props.match.params.accid; //console.log(id);\n                // {/* Retrieve clients for authenticated user. */}}\n\n                _context.next = 3;\n                return api.get('/clients');\n\n              case 3:\n                res = _context.sent;\n                _context.next = 6;\n                return api.get(\"/accounts/\".concat(res.data[0]._id));\n\n              case 6:\n                accounts = _context.sent;\n                _context.next = 9;\n                return api.get(\"/transactions/\".concat(id, \"/.*\"));\n\n              case 9:\n                transactions = _context.sent;\n                x = 0;\n\n              case 11:\n                if (!(x < accounts.data.length)) {\n                  _context.next = 18;\n                  break;\n                }\n\n                if (!(accounts.data[x]._id === id)) {\n                  _context.next = 15;\n                  break;\n                }\n\n                _this2.setState({\n                  account: accounts.data[x]\n                });\n\n                return _context.abrupt(\"break\", 18);\n\n              case 15:\n                x++;\n                _context.next = 11;\n                break;\n\n              case 18:\n                _this2.setState({\n                  transactions: transactions.data\n                }); // console.log(accounts);\n\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }))();\n    }\n  }, {\n    key: \"render\",\n    // {/* Render method returns a second navbar and user's transaction list on the screen. */}\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navbar2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(NavLink, {\n        to: \"/MyAccounts\",\n        className: \"navButton\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \" My Accounts \"), React.createElement(NavLink, {\n        to: \"/newAcc\",\n        className: \"navButton\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \" New Accounts \"), React.createElement(NavLink, {\n        to: \"/accInfo\",\n        className: \"navButton\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \" Account Information \")), React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"payments\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \"Statements\"), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, this.state.account.description), React.createElement(\"table\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"Date\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Reference\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"Amount\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"Balance\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      })), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, this.state.transactions.map(function (x) {\n        return (// {/* Sets the key. */}\n          React.createElement(\"tr\", {\n            key: x._id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 88\n            },\n            __self: this\n          }, React.createElement(\"td\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 90\n            },\n            __self: this\n          }, Intl.DateTimeFormat('en-GB', {\n            year: 'numeric',\n            month: 'long',\n            day: '2-digit',\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit'\n          }).format(x.time)), React.createElement(\"td\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98\n            },\n            __self: this\n          }, x.ref), React.createElement(\"td\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 100\n            },\n            __self: this\n          }, Intl.NumberFormat('en-GB', {\n            style: 'currency',\n            currency: 'ZAR'\n          }).format(x.amount)), React.createElement(\"td\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 105\n            },\n            __self: this\n          }, Intl.NumberFormat('en-GB', {\n            style: 'currency',\n            currency: 'ZAR'\n          }).format(x.balance)))\n        );\n      }))), React.createElement(\"button\", {\n        className: \"button\",\n        onClick: function onClick() {\n          return window.print();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"Print\"))));\n    }\n  }]);\n\n  return Statements;\n}(Component);\n\nexport default Statements;","map":{"version":3,"sources":["/Users/darrendeabreu/Desktop/repo/src/components/Statements.js"],"names":["React","Component","NavLink","axios","jsSHA","Statements","state","account","transactions","user","password","hmac","setHMACKey","update","Date","now","toString","substring","token","getHMAC","api","create","baseURL","headers","id","props","match","params","accid","get","res","data","_id","accounts","x","length","setState","description","map","Intl","DateTimeFormat","year","month","day","hour","minute","second","format","time","ref","NumberFormat","style","currency","amount","balance","window","print"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport axios from 'axios';\nimport jsSHA from 'jssha';\n\nclass Statements extends Component {\n  // {/* The constructor for a React Component is called before it is mounted. */}\n  constructor() {\n    {/* Pass props to the constructor by super. */}\n    super()\n    {/* Initalise the local state by assigning objects to this.state. */}\n    this.state = { account: {}, transactions: [] };\n  }\n\n  // {/* Invoked immediately after a component is mounted. */}\n  componentDidMount() {\n    {/* username and password had to be hard coded in order to view the statements of the individual accounts, if user had 1< accounts an empty table was rendered */}\n    const user = 'blacktiger144';\n    const password = '191919';\n    const hmac = new jsSHA('SHA-256', 'TEXT');\n    hmac.setHMACKey(password, 'TEXT');\n    hmac.update(user);\n    hmac.update(Date.now().toString(36).substring(0, 4));\n    const token = `${hmac.getHMAC('HEX')}%${user}`;\n    const api = axios.create({\n      // {/** Instantiate the network request. */}\n      baseURL: 'http://45.77.58.134:8080',\n      headers: { 'Authorization': 'Bearer ' + token }\n    });\n\n    (async () => {\n      const id = this.props.match.params.accid;\n      //console.log(id);\n      // {/* Retrieve clients for authenticated user. */}}\n      const res = await api.get('/clients');\n      // /*  Retrieve accounts for specified client UUID. */}\n      const accounts = await api.get(`/accounts/${res.data[0]._id}`)\n      // {/*  Retrieves all( .*) transactions for given accounts based on the clients ID. */}\n      const transactions = await api.get(`/transactions/${id}/.*`)\n      for (let x = 0; x < accounts.data.length; x++) {\n        // {/* If the clients ID equals the accounts ID then it calls setSate() to get data from the accounts state to show\n        // the clients statatement. */}\n        if (accounts.data[x]._id === id) {\n          {/* Calls setState() immediately in componentDidMount().\n            * setSate() updates the accounts state with the account data.\n            * Passing accounts object to setState().\n            */}\n            this.setState({account: accounts.data[x]});\n            break;\n          }\n        }\n\n        {/* Calls setState() immediately in componentDidMount().\n          * setSate() updates the transactions state with transactions data.\n          * Passing transactions object to setState().\n          */}\n          this.setState({transactions: transactions.data});\n          // console.log(accounts);\n        })();\n      };\n\n      // {/* Render method returns a second navbar and user's transaction list on the screen. */}\n      render () {\n        return (\n          <div>\n          <div className = \"navbar2\">\n          <NavLink to=\"/MyAccounts\" className = \"navButton\"> My Accounts </NavLink>\n          <NavLink to=\"/newAcc\" className = \"navButton\"> New Accounts </NavLink>\n          <NavLink to=\"/accInfo\" className = \"navButton\"> Account Information </NavLink>\n          </div>\n          <div className = \"content\">\n          <div id=\"payments\">\n          <h1>Statements</h1>\n          {/* Renders the description of the account e.g. cheque, savings by having access to local state by this.state. */}\n          <h2>{this.state.account.description}</h2>\n          <table>\n          <thead>\n          <th>Date</th>\n          <th>Reference</th>\n          <th>Amount</th>\n          <th>Balance</th>\n          <th></th>\n          </thead>\n          <tbody>\n          {/* Maps the transactions into a table. */}\n          {this.state.transactions.map(x =>\n            // {/* Sets the key. */}\n            <tr key = {x._id}>\n            {/*Formats the date from seconds into 'YYYY/MM/D'. */}\n            <td>{Intl.DateTimeFormat('en-GB', {\n              year: 'numeric',\n              month: 'long',\n              day: '2-digit',\n              hour: '2-digit',\n              minute: '2-digit',\n              second: '2-digit'\n            }).format(x.time)}</td>\n            <td>{x.ref}</td>\n            {/* Converts the cents to rands. */}\n            <td>{Intl.NumberFormat('en-GB', {\n              style: 'currency',\n              currency: 'ZAR',\n            }).format(x.amount)}</td>\n            {/* Converts the cents to rands. */}\n            <td>{Intl.NumberFormat('en-GB', {\n              style: 'currency',\n              currency: 'ZAR',\n            }).format(x.balance)}</td>\n            </tr>\n          )}\n          </tbody>\n          </table>\n          {/* Upon clikcing the print button, the print dialog box appears on the screen. */}\n          <button className = \"button\" onClick={() => window.print()}>Print</button>\n          </div>\n          </div>\n          </div>\n        )\n      }\n    }\n\n    export default Statements\n"]},"metadata":{},"sourceType":"module"}